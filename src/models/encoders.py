import torch
import torch.nn as nn
import torch.nn.functional as F
import pytorch_lightning as pl
from torch.optim import Adam
from GraphBuilder import GraphBuilder
from abc import ABC, abstractmethod


class BaseEncoder(ABC, pl.LightningModule):

    def __init__(self):
        super().__init__()
        self.edge_level = False

    def set_edge_level_graphbuilder(self, graph_builder: GraphBuilder):
        self.edge_level = True
        self.graph_builder = graph_builder

    def get_graph_batch(self, x):
        if self.edge_level:
            return self.graph_builder.compute_row_level_batch(x, self.device)
        else:
            return x

    @abstractmethod
    def get_latent(self, x):
        pass

class Encoder(BaseEncoder):

    def __init__(self, input_dim: int, hidden_dim: int, latent_dim: int):
        super().__init__()
        self.linear1 = nn.Linear(input_dim, hidden_dim)
        self.linear2 = nn.Linear(hidden_dim, hidden_dim)
        self.linear3 = nn.Linear(hidden_dim, latent_dim)

    def forward(self, x):
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        x = F.relu(self.linear3(x))
        return x
    
    def get_latent(self, x):
        return self.forward(x)


class Decoder(nn.Module):

    def __init__(self, latent_dim: int, hidden_dim: int, output_dim: int):
        super().__init__()
        self.linear1 = nn.Linear(latent_dim, hidden_dim)
        self.linear2 = nn.Linear(hidden_dim, hidden_dim)
        self.linear3 = nn.Linear(hidden_dim, output_dim)
        # self.regr = nn.Linear(output_dim, output_dim)

    def forward(self, x):
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        return self.linear3(x)




class AutoEncoder(BaseEncoder):

    def __init__(self, input_dim: int, latent_dim: int):
        super().__init__()
        self.save_hyperparameters()

        self.hidden_dim = (input_dim + latent_dim) // 2
        self.encoder = Encoder(input_dim, self.hidden_dim, latent_dim)
        self.decoder = Decoder(latent_dim, self.hidden_dim, input_dim)

    def forward(self, x):
        z = self.encoder(x)
        x_hat = self.decoder(z)
        return x_hat

    def get_latent(self, x):
        z = self.encoder(x)
        return z

    def common_step(self, batch):
        x, _ = batch
        x = self.get_graph_batch(x)
        x_hat = self(x)
        loss = F.mse_loss(x, x_hat)
        return loss

    def training_step(self, batch, batch_idx):
        loss = self.common_step(batch)
        self.log('training_loss', loss, on_epoch=True)
        return loss

    def validation_step(self, batch, batch_idx):
        loss = self.common_step(batch)
        self.log('validation_loss', loss, on_epoch=True)
        return loss

    def configure_optimizers(self):
        optimizer = Adam(self.parameters(), lr=1e-3)
        return optimizer


# for now using an MLP as encoder and decoder
class VariationalEncoder(BaseEncoder):

    def __init__(self, input_dim: int, hidden_dim: int, latent_dim: int):
        super().__init__()
        self.linear1 = nn.Linear(input_dim, hidden_dim)
        self.linear2 = nn.Linear(hidden_dim, hidden_dim)
        self.linear_mu = nn.Linear(hidden_dim, latent_dim)
        self.linear_sigma = nn.Linear(hidden_dim, latent_dim)

        self.N = torch.distributions.Normal(0, 1)
        # sample on the gpu
        self.N.loc = self.N.loc.cuda()
        self.N.scale = self.N.scale.cuda()
        self.kl = 0

    def forward(self, x):
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        mu = self.linear_mu(x)
        sigma = torch.exp(self.linear_sigma(x))

        z = mu + sigma * self.N.sample(mu.shape)
        # print("mu:", mu)
        # print("sigma:", sigma)
        self.kl = (sigma**2 + mu**2 - torch.log(sigma) - 1 / 2).mean()
        return z

    def forward_det(self, x):
        """
        Returns the deterministic mean of the gaussian generated by the sample
        """
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        mu = self.linear_mu(x)
        return mu

    def get_latent(self, x):
        return self.forward_det(x)
    

class VAE(BaseEncoder):

    def __init__(self, input_dim: int, latent_dim: int):
        super().__init__()
        self.save_hyperparameters()

        self.hidden_dim = (input_dim + latent_dim) // 2
        self.encoder = VariationalEncoder(input_dim, self.hidden_dim, latent_dim)
        self.decoder = Decoder(latent_dim, self.hidden_dim, input_dim)

    def forward(self, x):
        z = self.encoder(x)
        x_hat = self.decoder(z)
        return x_hat

    def get_latent(self, x):
        z = self.encoder.forward_det(x)
        return z

    def common_step(self, batch):
        x, _ = batch
        x = self.get_graph_batch(x)
        x_hat = self(x)
        kl = self.encoder.kl
        loss = F.mse_loss(x, x_hat)
        return loss, kl

    def training_step(self, batch, batch_idx):
        loss, kl = self.common_step(batch)
        self.log('training_loss', loss, on_epoch=True)
        self.log('training_kl', kl, on_epoch=True)
        return loss + kl

    def validation_step(self, batch, batch_idx):
        loss, kl = self.common_step(batch)
        self.log('validation_loss', loss, on_epoch=True)
        self.log('validation_kl', kl, on_epoch=True)
        return loss + kl

    def configure_optimizers(self):
        optimizer = Adam(self.parameters(), lr=1e-3)
        return optimizer